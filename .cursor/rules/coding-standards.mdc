# Coding Standards & Best Practices

## TypeScript & React Standards
- Use TypeScript strict mode - always define proper types
- Prefer functional components with hooks over class components
- Use meaningful, descriptive variable and function names
- Implement proper error boundaries and loading states
- Follow React 19 best practices and patterns

## Component Structure
- Create reusable, composable components
- Use `class-variance-authority` for component variants
- Implement proper prop interfaces with TypeScript
- Keep components focused and single-responsibility
- Use `clsx` for conditional class names

## Styling Guidelines
- Use Tailwind CSS utility classes as primary styling method
- Follow mobile-first responsive design approach
- Implement consistent spacing using Tailwind's spacing scale
- Use CSS custom properties for theme variables
- Maintain consistent color palette (dark base + accent colors)

## Performance & Accessibility
- Implement proper semantic HTML structure
- Use Next.js Image component for optimized images
- Implement proper loading states and error handling
- Ensure keyboard navigation and screen reader compatibility
- Use Framer Motion for smooth, performant animations

## Code Organization
- Group related components in feature folders
- Use barrel exports (index.ts) for clean imports
- Keep utility functions in `lib/` directory
- Implement proper error handling and logging
- Use consistent file naming (kebab-case for files, PascalCase for components)
description:
globs:
alwaysApply: false
---
